require 'time'
require 'gist'
require 'cve_crawler/cve_core'

module Sicherheit
  module Plugin
    class CveAnnouncer
      include Cinch::Plugin

      def initialize(*args)
        super

        cve = @bot.config.cve
        @timer = Timer(cve['timer'] || 300, method: :check_cve)
        @core = CVE::Core.new(cve['crawl_type'] || 'default', cve['ssl_verify'], cve['user_agent'])
        @channels = cve['announce_to']
        @format = cve['format']
        @gist_barrier = cve['gist_barrier'] || 5
        @silence_warnings = cve['silence_warnings']

        # Cache CVE's that have already happened. Avoid broadcasting them to the channel each reboot.
        check_cve(true)
      end

      match Regexp.new('swarn(?:ings)?'), method: :silence_warnings
      def silence_warnings(m)
        return unless @channels.include?(m.channel.name.downcase)

        unless m.channel.opped?(m.user)
          m.user.notice('You are not authorized to use this command!')
          return
        end

        @silence_warnings = !@silence_warnings
        m.reply('Script and crawl warning notifications have been turned %{status}.' % {status: @silence_warnings ? 'off' : 'on'})
      end

      def check_cve(dry_run=false)
        begin
          all_cve = @core.fetch
        rescue e
          warn e.to_s

          return if @silence_warnings
          all_cve = "Failed to retrieve data: #{e.to_s}"
        end

        return debug('No new CVE vulnerabilities during crawl') if all_cve.nil? || all_cve.count == 0

        if all_cve.is_a?(String)
          unless dry_run
            @channels.each do |chan|
              Channel(chan).send(all_cve)
            end
          end
          return
        end

        cve_string = ''
        all_cve.each { |vuln| cve_string += cve_to_string(vuln) + "\n" }

        if all_cve.count > @gist_barrier
          cve_string = "Gisted vulnerabilities (#{all_cve.count}): " +
            Gist.gist(cve_string, {:filename => 'cve.txt', :anonymous => true})['html_url']
        end

        return if dry_run

        @channels.each do |chan|
          Channel(chan).send(cve_string)
        end
      end

      def cve_to_string(cve)
        @format % {identifier: cve.identifier, date: fmt_time(cve.date), description: cve.description,
          link: cve.link, title: cve.title, affected_software: cve.affected_software}
      end

      def fmt_time(time)
        now = Time.now.to_i
        since = now - time.to_i

        if since <= 3540 && since >= 0
          if since > 60
            since = (since / 60).round
            time_str = 'minute'
          else
            time_str = 'second'
          end

          time_str += 's' if since != 1
          return "#{since} #{time_str} ago"
        end

        time.utc.iso8601
      end
    end
  end
end
